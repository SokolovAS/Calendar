// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/calendar/user-service.go

// Package http is a generated GoMock package.
package http

import (
	entity "Calendar/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CheckPassword mocks base method.
func (m *MockUserService) CheckPassword(providedPassword, userPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", providedPassword, userPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockUserServiceMockRecorder) CheckPassword(providedPassword, userPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockUserService)(nil).CheckPassword), providedPassword, userPassword)
}

// CreateUserRecord mocks base method.
func (m_2 *MockUserService) CreateUserRecord(m entity.User) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateUserRecord", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserRecord indicates an expected call of CreateUserRecord.
func (mr *MockUserServiceMockRecorder) CreateUserRecord(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRecord", reflect.TypeOf((*MockUserService)(nil).CreateUserRecord), m)
}

// GetEmail mocks base method.
func (m *MockUserService) GetEmail(email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail", email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockUserServiceMockRecorder) GetEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockUserService)(nil).GetEmail), email)
}

// HashPassword mocks base method.
func (m_2 *MockUserService) HashPassword(m *entity.User) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "HashPassword", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockUserServiceMockRecorder) HashPassword(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockUserService)(nil).HashPassword), m)
}
