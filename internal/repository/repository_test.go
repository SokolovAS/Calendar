// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package repository

import (
	entity "Calendar/entity"
	"fmt"
	"github.com/stretchr/testify/require"
	"testing"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

const testEmail = "test@email.com"

func TestGetEmail(t *testing.T) {
	testCases := []struct {
		name    string
		mock    func(ctrl *gomock.Controller) gormConnection
		wantErr bool
	}{
		{
			name:    "success",
			wantErr: false,
			mock: func(ctrl *gomock.Controller) gormConnection {
				mC := NewMockgormConnection(ctrl)
				mS := NewMockgormScanner(ctrl)

				mC.EXPECT().Where(gomock.Any(), gomock.Any()).Return(mS)
				mS.EXPECT().First(gomock.Any()).Return(&gorm.DB{})
				return mC
			},
		},
		{
			name:    "bad path",
			wantErr: true,
			mock: func(ctrl *gomock.Controller) gormConnection {
				mC := NewMockgormConnection(ctrl)
				mS := NewMockgormScanner(ctrl)

				mC.EXPECT().Where(gomock.Any(), gomock.Any()).Return(mS)
				mS.EXPECT().First(gomock.Any()).Return(&gorm.DB{
					Error: fmt.Errorf("err"),
				})
				return mC
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			ctl := gomock.NewController(t)
			defer ctl.Finish()

			mock := tc.mock(ctl)
			repo := sqliteRepo{gormConnection: mock}

			_, err := repo.GetEmail(testEmail)
			if tc.wantErr {
				require.Error(t, err)
				return
			}

			require.NoError(t, err)
		})
	}
}

func TestCreate(t *testing.T) {
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mC := NewMockgormConnection(ctrl)
	mC.EXPECT().Create(gomock.Any()).Return(&gorm.DB{})

	repo := sqliteRepo{gormConnection: mC}
	u := entity.User{}
	repo.Create(&u)
}
